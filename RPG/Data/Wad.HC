

I64 *DumpKey(U8 *_d,U8 *class_name=lastclass)
{
  CHashClass *tmpc=HashFind(class_name,Fs->hash_table,HTT_CLASS);
  I64 *q; 
  if (!tmpc) return 0;
  CMemberLst *ml;
  ml=tmpc->member_lst_and_root;
  while (ml) {
    q=_d+ml->offset;
    I64 ret = ToI64((*q));
    ml=ml->next;
    return ret;

  }
}

Bool *DumpBoolIndex(I64 i,U8 *_d,U8 *class_name=lastclass)
{
  CHashClass *tmpc=HashFind(class_name,Fs->hash_table,HTT_CLASS);
  I64 *q; I64 check=0;
  if (!tmpc) return 0;
  CMemberLst *ml;
  ml=tmpc->member_lst_and_root;
  Bool* ret;
  while (check<i) {
    q=_d+ml->offset;
    //"%s",ml->str;
    ret=MemberMetaData("print_str",ml);
    ml=ml->next;
    check++;
  }
  return ret;
}


//Original code by nrootconauto (Clayton Rhodes)


public I64 GrYoloFloodFill(CDC *dc=gr.dc,I64 x,I64 y,
	Bool not_color=FALSE,I64 z=0,I32 *db=NULL)
{//2D. Ignore z and db.
//not_color=TRUE means fill up to everything which is not the current color.
  //not_color=FALSE means fill all parts equ to the color under the point.
  //Returns cnt of pixs changed
  I64 res=0,j,old_flags=dc->flags;
  CColorROPU32 old_color2=dc->color2;
  CDC *old_brush;
  //if (dc->flags & DCF_DONT_DRAW) //TODO
  //  return 0;
  old_brush=dc->brush;
  dc->brush=NULL;
  if ((j=GrPeek(dc,x,y))>=0) {
    if (not_color) {
      dc->color2=dc->color.c0.color;
      dc->flags|=DCF_FILL_NOT_COLOR;
    } else {
      dc->color2=j;
      if (dc->color.c1.rop&ROPBF_DITHER) {
	if (dc->color2.c0.color==dc->color.c0.color &&
	      dc->color.c0.color==dc->color.c1.color)
	  goto ff_done;
      } else if (dc->color2.c0.color==dc->color.c0.color)
	goto ff_done;
      dc->flags&=~DCF_FILL_NOT_COLOR;
    }
    if (not_color && j!=dc->color2 ||
	  !not_color)
      res=GrFloodFillRay(dc,x,y,z,db);
  }
ff_done:
  dc->brush=old_brush;
  dc->flags=old_flags;
  dc->color2=old_color2;
  return res;
}



U32 class CRGB {
  U8 r,g,b,a;
};

static U8 *doom_palette_dithered=NULL;

U8 *DitherPalette(CRGB *data) {
  U8 *ret=MAlloc(16*16);
  CBGR48 palette48[16*16];
  I64 x,y,canidate,best_color;
  F64 best_dist,dist;
  CRGB normal[16*16],cur_pixel;
  GrPaletteGet(palette48);
  for(x=0;x!=16;x++) {
    normal[x].r=ToF64(palette48[x].r)/0xfff*0xff;
    normal[x].g=ToF64(palette48[x].g)/0xfff*0xff;
    normal[x].b=ToF64(palette48[x].b)/0xfff*0xff;
    normal[x*16].r=normal[x].r;
    normal[x*16].g=normal[x].g;
    normal[x*16].b=normal[x].b;
  }
  for(y=1;y!=16;y++) {
    for(x=1;x!=16;x++) {
      normal[x+y*16].r=ToF64(normal[x].r+normal[y].r)/2;
      normal[x+y*16].g=ToF64(normal[x].g+normal[y].g)/2;
      normal[x+y*16].b=ToF64(normal[x].b+normal[y].b)/2;
    }
  }
  for(x=0;x!=16;x++) {
    for(y=0;y!=16;y++) {
      cur_pixel=data[x+y*16];
      best_color=0;
      best_dist=1e100;
      if(!cur_pixel.a||!(cur_pixel.g<20&&cur_pixel.r<20&&cur_pixel.b))  {
        for(canidate=0;canidate!=16*16;canidate++) {
	  dist=Sqrt(Sqr(normal[canidate].r-cur_pixel.r)+
	        Sqr(normal[canidate].g-cur_pixel.g)+
	        Sqr(normal[canidate].b-cur_pixel.b));
	  if(dist<best_dist) {
	    best_dist=dist;
	    best_color=canidate;
	  }
        }
        ret[x+y*16]=best_color;
      } else
        ret[x+y*16]=TRANSPARENT;
    }
  }
  ret[TRANSPARENT]=TRANSPARENT;
  return ret;
}

CDC *PaletteizeImage(I64 w,I64 h,U8 *dith_data) {
  CDC *ret=DCNew(w*2,h*2);
  DCFill(ret,TRANSPARENT);
  I64 x,y;
  for(y=0;y!=h;y++) {
    for(x=0;x!=w;x++) {
      if(*dith_data!=TRANSPARENT) {
        ret->color=*dith_data&0xf;
        GrPlot(ret,x*2,y*2);
        GrPlot(ret,x*2+1,y*2+1);
        ret->color=*dith_data>>4;
        GrPlot(ret,x*2+1,y*2);
        GrPlot(ret,x*2,y*2+1);
      }
      dith_data++;
    }
  }
  return ret;
}

class CDoomImage {
  I16 w,h,left,top;
  I32 col_offs[0];
};

class CDoomImageCol {
  U8 rowstart,px_cnt,silly_bye;
  U8 data[0];
};

//https://doomwiki.org/wiki/Picture_format
CDC *ReadDoomImage(CDoomImage *header) {
  I64 w=header->w,h=header->h,rowstart,i,j,px_cnt;
  U8 *ptr;
  U8 *pdata=CAlloc(w*h);
  for(i=0;i!=w;i++)
    for(j=0;j!=h;j++)
      pdata[j*w+i]=TRANSPARENT;
  for(i=0;i!=w;i++) {
    ptr=header(U8*)+header->col_offs[i];
    rowstart=0;
    while(rowstart!=255) {
      rowstart=*ptr++;
      if(rowstart==255) break;
      px_cnt=*ptr++;
      //Print("%d\n",px_cnt);
      //if(!px_cnt) throw('Poop');
      ptr++;
      for(j=0;j!=px_cnt;j++) {
        pdata[(j+rowstart)*w+i]=doom_palette_dithered[*ptr++];
      }
      ptr++;
    }
  }
  ptr=PaletteizeImage(w,h,pdata);
  Free(pdata);
  ptr(CDC*)->x=header->left;
  ptr(CDC*)->y=header->top;
  return ptr;
}

CDC *ReadDoomFlat(U8 *flat,CRGB *pal) {
  I64 len;
  CDC *ret;
  U8 *dith=CAlloc(64*64);
  for(len=64*64-1;len>=0;len--)
    dith[len]=doom_palette_dithered[flat[len]];
  ret=PaletteizeImage(64,64,dith);
  Free(dith);
  return ret;
}
CRGB *LoadPLAYPALFromLump(U8 *lump) {
  CRGB *ret=CAlloc(sizeof(CRGB)*256);
  I64 cnt;
  for(cnt=0;cnt!=256;cnt++) {
    ret[cnt].r=*lump++;
    ret[cnt].g=*lump++;
    ret[cnt].b=*lump++;
  }
  Free(doom_palette_dithered);
  doom_palette_dithered=DitherPalette(ret);
  return ret;
}


class CWad {
  U8 body[0];
  U8 ident[4];
  U32 lump_cnt;
  U32 directory_ptr;
};
 



CWad *LoadWad(U8 *filename) {
  return FileRead(filename);

}
static CWad *wad=LoadWad("Data/RPG.WAD");

class CWadDirectory {
  U32 ptr;
  U32 lump_size;
  U8 lump_name[8];
};


class CDoomGr {
  CRGB *palette;
  I64 pname_cnt;
  U64 *pnames;
};

class CWadTexturePatch {
  I16 origin_x,origin_y;
  I16 patch_index;
  I16 unused,unused2;
};

class CWadTexture {
  U8 name[8];
  I32 unused;
  I16 w,h;
  I32 unused2;
  I16 patch_cnt; 
  CWadTexturePatch patches[0];
};

class CWadTEXTURE1 {
  I32 num_textures;
  I32 texture_offsets[0];
};

class CWadPnames {
  I32 len;
  U64 names[0];
};

I64 StrCmp8(U8 *a,U8 *b) {
  if(StrLen(a)>8||StrLen(b)>8)
    return StrNCmp(a,b,8);
  return StrCmp(a,b);
}

CDC *PNameIndexToDC(I64 idx,CDoomGr *gr) {
  U8 name[9];
  name[8]=0;
  MemCpy(name,&gr->pnames[idx],8);
  return FramePtr(name);
}


I64 PNameIndex(U8 *name,CDoomGr *gr) {
  I64 idx=gr->pname_cnt;
  while(--idx>=0) {
    if(!StrCmp8(&gr->pnames[idx],name))
      return idx;
  }
  return -1;
}

// Patches.
// A patch holds one or more columns.
// Patches are used for sprites and all masked pictures,
// and we compose textures from the TEXTURE1/2 lists
// of patches.
class patch_t 
{ 
    I32 width;		// bounding box size 
    I32 height; 
    I32 leftoffset;	// pixels to the left of origin 
    I32 topoffset;	// pixels below the origin 
    I64 columnofs[8];	// only [width] used
    // the [0] is &columnofs[width] 
};


//
// W_CheckNumForName
// Returns -1 if name not found.
//

I64 W_CheckNumForName (U8 *name,CWad *doom_wad)
{

    U8 name8[9];    
    
    I32		v1;
    I32		v2;
    CWadDirectory*	lump_p;

    // make the name into two integers for easy compares
    MemCpy (name8,name,8);

    // in case the name was a fill 8 chars
    name8[8] = 0;

    // case insensitive
    for(v1=0;v1!=8;v1++)
      name8[v1]=ToUpper(name8[v1]);
    //Print("%s\n",name);
    // scan backwards so patch lump files take precedence
    CWadDirectory *lumpinfo = doom_wad(U8*)+doom_wad->directory_ptr;
    lump_p=lumpinfo+doom_wad->lump_cnt;

    while (lump_p-- != lumpinfo)
    {
	if (!StrCmp8(lump_p->lump_name,name8))
	{
	      return lump_p - lumpinfo;
	}
    }

   return -1;
}

//
//Nroot,get lump by num
//
U8 *W_GetLumpPtrFromNum(I64 idx,CWad *wad,I64 *lump_len=NULL) {
  CWadDirectory *dir=wad(U8*)+wad->directory_ptr;
  dir+=idx;
  if(lump_len) *lump_len=dir->lump_size;
  return wad(U8*)+dir->ptr;
} 
//
// Nroot,Get pointer to lump
//
U8 *W_GetLumpPtrFromName(U8 *name,CWad *wad,I64 *lump_len=NULL,I64 which=1) {
  I64 idx=W_CheckNumForName(name,wad);
  return W_GetLumpPtrFromNum(idx,wad,lump_len);
}




U0 LoadWadTEXTUREs(CWadTEXTURE1 *header,CDoomGr *gr) {
  I64 texture,i,anim_cnt,x,y;
  U8 name[9];
  CDC *result,*patch;
  CWadTexture *map_texture;
  for(texture=0;texture!=header->num_textures;texture++) {
    map_texture=header(U8*)+header->texture_offsets[texture];
    result=DCNew(map_texture->w*2,map_texture->h*2);
    DCFill(result,TRANSPARENT);
    name[8]=0;
    MemCpy(name,map_texture->name,8);
    for(i=0;i!=map_texture->patch_cnt;i++) {
      if(patch=PNameIndexToDC(map_texture->patches[i].patch_index,gr))
      GrBlot(result,
	map_texture->patches[i].origin_x*2,
	map_texture->patches[i].origin_y*2,
	patch);
    }
    for(x=0;x!=result->width;x++)
      for(y=0;y!=result->height;y++) {
	if(GrPeek0(result,x,y)==TRANSPARENT)
	  goto fin;
      }
//MAKE SURE TO SET THIS FOR THE RENDERER
    result->flags|=DCF_NO_TRANSPARENTS;
fin:
    FramePtrAdd(name,result);
    //GrBlot(,0,0,result);
    //Sleep(100);
  }
}

CDoomGr *LoadWadGr(CWad *wad) {
  CDoomGr *ret=CAlloc(sizeof(CDoomGr));
  CWadDirectory *wad_dir;
  I64 idx,pass;
  U8 lump_name[9];
  CWadPnames *pnames;
  CDC *gr;
//Load Player palett
  if(W_CheckNumForName("PLAYPAL",wad)!=-1)
    ret->palette=LoadPLAYPALFromLump(W_GetLumpPtrFromName("PLAYPAL",wad));
//Find the sprites start
//Load Wall Patch names(ONLYUSE LASTFOR NOW)
  //pass=1;
  //do {
    wad_dir=wad->body+wad->directory_ptr;
    wad_dir+=W_CheckNumForName("PNAMES",wad);
    pnames=wad->body+wad_dir->ptr;
    ret->pname_cnt=pnames->len;
    ret->pnames=MAlloc(ret->pname_cnt*8);
    MemCpy(ret->pnames,pnames->names,ret->pname_cnt*8);
//Load wall patches
    wad_dir=wad->body+wad->directory_ptr;
    wad_dir+=W_CheckNumForName("P_START",wad);
    //Print("%d\n",wad->body+wad->directory_ptr);
found_pstart:
    wad_dir++; //Move past S_START
    //Print("\n%s\n",wad_dir->lump_name);
    if(StrCmp8(wad_dir->lump_name,"P_END")) {
      if(wad_dir->lump_size) {
        lump_name[8]=0;
        MemCpy(lump_name,wad_dir->lump_name,8);
        //Print("\n%s\n",lump_name);
        gr=ReadDoomImage(wad->body+wad_dir->ptr);
       //GrBlot(,0,0,gr);
       //Sleep(100);
       //DCFill;
       FramePtrAdd(lump_name,gr);
      }
      goto found_pstart;
    }
    LoadWadTEXTUREs(W_GetLumpPtrFromName("TEXTURE1",wad),ret);
    if(W_CheckNumForName("TEXTURE2",wad)!=-1)
      LoadWadTEXTUREs(W_GetLumpPtrFromName("TEXTURE2",wad),ret);
    pass++;
  //} while(TRUE);

  //FACES

  //LoadGrLump(wad,"STFST01");
  //LoadGrLump(wad,"STFST00");
  //LoadGrLump(wad,"STFST02");

  return ret;
}


//LoadWad("RPG.WAD");
LoadWadGr(wad);


